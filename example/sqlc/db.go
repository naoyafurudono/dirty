// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

type Queries struct {
	db DBTX
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

// Models
type User struct {
	ID        int64
	Email     string
	Name      string
	Status    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Organization struct {
	ID   int64
	Name string
}

type AuditLog struct {
	ID        int64
	UserID    int64
	Action    string
	CreatedAt time.Time
}

// GetUser retrieves a user by ID
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	// SELECT * FROM users WHERE id = $1
	return User{}, nil
}

// GetUserByEmail retrieves a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	// SELECT * FROM users WHERE email = $1
	return User{}, nil
}

// ListActiveUsers returns all active users
func (q *Queries) ListActiveUsers(ctx context.Context) ([]User, error) {
	// SELECT * FROM users WHERE status = 'active' ORDER BY created_at DESC
	return nil, nil
}

// CreateUser creates a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	// INSERT INTO users (email, name) VALUES ($1, $2) RETURNING *
	return User{}, nil
}

type CreateUserParams struct {
	Email string
	Name  string
}

// UpdateUserProfile updates user profile information
func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	// UPDATE users SET name = $2, updated_at = NOW() WHERE id = $1
	return nil
}

type UpdateUserProfileParams struct {
	ID   int64
	Name string
}

// DeleteUser soft deletes a user
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	// DELETE FROM users WHERE id = $1
	return nil
}

// GetUserWithOrganization retrieves user with their organization
func (q *Queries) GetUserWithOrganization(ctx context.Context, userID int64) (GetUserWithOrganizationRow, error) {
	// SELECT u.*, o.* FROM users u
	// JOIN user_organizations uo ON u.id = uo.user_id
	// JOIN organizations o ON uo.org_id = o.id
	// WHERE u.id = $1
	return GetUserWithOrganizationRow{}, nil
}

type GetUserWithOrganizationRow struct {
	User         User
	Organization Organization
}

// CreateUserWithAuditLog creates a user and logs the action
func (q *Queries) CreateUserWithAuditLog(ctx context.Context, arg CreateUserWithAuditLogParams) error {
	// BEGIN;
	// INSERT INTO users (email, name) VALUES ($1, $2) RETURNING id;
	// INSERT INTO audit_logs (user_id, action) VALUES ($3, $4);
	// COMMIT;
	return nil
}

type CreateUserWithAuditLogParams struct {
	Email  string
	Name   string
	Action string
}

// ArchiveUserAndSessions archives a user and removes their sessions
func (q *Queries) ArchiveUserAndSessions(ctx context.Context, userID int64) error {
	// BEGIN;
	// UPDATE users SET status = 'archived' WHERE id = $1;
	// DELETE FROM sessions WHERE user_id = $1;
	// COMMIT;
	return nil
}